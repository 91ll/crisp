#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Timesync example script
"""

__author__ = "Hannes Ovrén"
__copyright__ = "Copyright 2013, Hannes Ovrén"
__license__ = "GPL"
__email__ = "hannes.ovren@liu.se"

import os
import sys
import logging
import argparse
logging.basicConfig(format='%(levelname)s %(message)s', level=logging.INFO)
logger = logging.getLogger()

import numpy as np

import crisp
from crisp.cli import load_imu_from_file, load_vars_from_mat, load_images_timestamps_from_csv

description = """Calculate the time offset between a camera and IMU.

The user will be prompted to select a matching sequences in the camera (optical flow magnitude) and IMU data, which will be used
for doing the time synchronization.

This script requires the following data: 1) A CSV file with two columns: [filename, timestamp] that
decides which files should be used. 2) A file containing IMU data. 3) The time multiplier between the camera timestamps in the CSV file
and the IMU timestamps from the IMU data file.

If you also specify the camera calibration matrix and the readout time, the offset can be further refined using optimization.
"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("image_csv", metavar="CSV_FILE", help="CSV file that maps filenames to timestamps")
    parser.add_argument("imu_file", metavar="IMU_FILE", help="File containing IMU data")
    parser.add_argument("multiplier", type=float, metavar="TIME_MULT", help="Multiplicative time factor")
    parser.add_argument("--camera-params", metavar="MAT_FILE", help="File that contains internal camera calibration matrix")
    parser.add_argument("--relative-pose", metavar="MAT_FILE", help="File containing the relative pose between imu and camera")
    parser.add_argument("--manual", action="store_true", help="Turn on manual refinement sequence selection")
    verbose_group = parser.add_mutually_exclusive_group()
    verbose_group.add_argument("--verbose", "-v", action="store_true")
    verbose_group.add_argument("--quiet", "-q", action="store_true")
    args = parser.parse_args()
    
    if args.quiet:
        logger.setLevel(logging.WARNING)
    elif args.verbose:
        logger.setLevel(logging.DEBUG)

    # Load IMU data
    imu_file = os.path.expanduser(args.imu_file)
    imu = load_imu_from_file(imu_file)
    if imu is None:
        logger.error("Failed to load IMU data from %s" % imu_file)
        sys.exit(-1)
    logger.info("Performing Zero-Level IMU calibration on first 1.0 seconds")
    imu.zero_level_calibrate(1.0)

    # Create camera instance
    camera = crisp.Camera()

    # Load timestamps and input image file names
    image_csv = os.path.expanduser(args.image_csv)
    files, timestamps = load_images_timestamps_from_csv(image_csv)
    if len(files) < 1:
        logger.error("Could not load files and timestamps from %s" % image_csv)
        sys.exit(-1)
    camera.files = files
    camera.timestamps = np.array(timestamps) / args.multiplier # Apply multiplier
            
    # Load camera matrix if possible
    readout_time = None
    if args.camera_params:
        try:
            camera_params_file = os.path.expanduser(args.camera_params)
            res_dict = load_vars_from_mat(camera_params_file, {'K' : ['K', 'Krgb', 'Knir', 'Kir'], 'readout_time' : ['readout_time']})
            camera.K = res_dict['K']
            readout_time = float(res_dict['readout_time'])
            logger.debug("Camera calibration matrix is %s" % camera.K)
            logger.debug("Readout time is %.5f" % readout_time)
        except ValueError as e:
            logger.error(e.message)
            sys.exit(-1)
    else:
        logger.info("No camera parameters loaded, only rough offset can be calculated")
        
    can_refine_time_offset = True if camera.K is not None and readout_time is not None else False
        
    # Load relative pose if possible
    if args.relative_pose:
        try:
            relative_pose_file = os.path.expanduser(args.relative_pose)
            res_dict = load_vars_from_mat(relative_pose_file, {'R' : ['R', 'Rcg']})
            relative_pose = res_dict['R']
            logger.debug("Relative pose is %s" % relative_pose)
        except ValueError as e:
            logger.error(e.message)
            sys.exit(-1)
    else:
        logger.warning("No relative offset loaded, will assume gyro data is already in camera coordinate frame.")
        relative_pose = np.eye(3)
    
    if args.manual:            
        # Manual timesync
        logger.info("Finding rough time offset using user specified region")
        rough_offset, flow, frame_pair = crisp.sync_camera_gyro_manual(camera.image_sequence(), camera.timestamps, imu.gyro_data, imu.timestamps, full_output=True)
        logger.debug("Used frames in sequence [%d %d] for time sync" % frame_pair)
    else:
        # Automatic rough time sync
        levels = 6
        logger.info("Finding rough time offset using pyramid-ZNCC")
        rough_offset, flow = crisp.sync_camera_gyro(camera.image_sequence(), camera.timestamps, imu.gyro_data, imu.timestamps, levels, full_output=True)

    logger.info("Rough offset is %.5f seconds" % rough_offset)
    
    # Refine it?
    if can_refine_time_offset:
        rotation_sequence = imu.integrate(relative_pose) # Integrate gyro data
        if args.manual:
            logger.info("Refining offset using frames provided by user")
            a, b = frame_pair
        else:
            logger.info("Refining offset using a guessed sequence of good quality")
            a, b, _ = crisp.good_sequences_to_track(flow)[0] # Choose first/best sequence
            logger.debug("Chosen sequence: [%d %d]" % (a,b))
        image_subset = list(camera.image_sequence(a, b)) # Expand generator to list
        timestamp_subset = camera.timestamps[a:b+1] # Matching timestamps
        timestamp_subset += rough_offset # Apply the rough offset
        refined_offset = crisp.refine_time_offset(image_subset, timestamp_subset, rotation_sequence, imu.timestamps, camera.K, readout_time)
        logger.info("Refined offset is %.5f" % refined_offset)
    
        total_offset = rough_offset + refined_offset
    else:
        total_offset = rough_offset
        
    logger.info("Final offset is %.5f" % total_offset)